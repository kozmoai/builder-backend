# this ebnf file for simple sql grammar


/* SourceCharacter Expression */
SourceCharacter ::=  #x0009 | #x000A | #x000D | [#x0020-#xFFFF] /* /[\u0009\u000A\u000D\u0020-\uFFFF]/ */



/* Ignored Tokens Expression */
Ignored            ::= UnicodeBOM | WhiteSpace | LineTerminator | SingleLineComment | MultiLineComment 
UnicodeBOM         ::= #xFEFF  /* Byte Order Mark (U+FEFF) */
WhiteSpace         ::= #x0009 | #x0020 /* ASCII: \t | Space, Horizontal Tab (U+0009), Space (U+0020) */
LineTerminator     ::= #x000A | #x000D | #x000D#x000A   /* ASCII: \n | \r\n | \r, New Line (U+000A) | Carriage Return (U+000D) [Lookahead != New Line (U+000A)] | Carriage Return (U+000D)New Line (U+000A) */
SingleLineComment  ::= "#" CommentChar* | "--" CommentChar*
MultiLineComment   ::= "/*" SourceCharacter "*/"
CommentChar        ::= SourceCharacter - LineTerminator

/* Lexical Tokens Expression */
Token                ::= Words | OtherToken | StringValue 
Words                ::= [_A-Za-z][_0-9A-Za-z]*
OtherToken           ::= SourceCharacter - Words 
StringValue          ::= '"' '"' | '"' StringCharacter* '"' | '"""' BlockStringCharacter* '"""'
StringCharacter      ::= SourceCharacter - '"' | SourceCharacter - "\" | SourceCharacter - LineTerminator | "\u" EscapedUnicode | "\" EscapedCharacter /* SourceCharacter but not " or \ or LineTerminator | \uEscapedUnicode | \EscapedCharacter */
EscapedUnicode       ::= [#x0000-#xFFFF] 
EscapedCharacter     ::= '"' | '\' | '/' | 'b' | 'f' | 'n' | 'r' | 't'
BlockStringCharacter ::= SourceCharacter - '"""' | SourceCharacter - '\"""' | '\"""' 

SQL             ::= Ignored Statement+ Ignored 
Statement       ::= Ignored QueryType Ignored Query Ignored   
QueryType       ::= "select" | "update" | "delete" | "create" 
Query           ::= Token+
